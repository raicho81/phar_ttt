{
    "default": {
        "game_type": "CVsC",                        // CVsC - Computer VS Computer play, HVsC - Human VS Computer play
        "train": true,                              // if {"game_type": "CVsC"}. Starts training by using random moves else just updates the training data after each game HVsC
        "inner_iterations": 5000,                   // only meaningful if {"game_type": "CVsC"} - the number of training iterations when training or number of games played CVsC if {"train": false} when 								 running one process
        "iterations": 100,                          // how many processes to spawn (inner_iteration * iterations * process_pool_size = total games played for training)
        "process_pool_size": 8,                     // process pool size. If zero defaults to os.cpu_count(). Probably you have to expirement with this to reach optimal
                                                    // performance depending mostly on the Redis / Postgres DB performance
        "threads_count": 2                          // How many threads to spawn per process
        "board_size": 4,                            // desk (board) size
        "train_iterations_info_skip": 1000,         // How many iterations to skip logging when training because we don't want to waste log output
        "encode_training_data" : true,              // If true: encode training data with msgpack to save memory. Probably this will be removed.
        "postgres_dbname": "postgres",	            // Postgres DB name
        "postgres_port": 5432,	  	                // Posgres DB port
        "postgres_host": "192.168.1.3",	            // Postgres DB Host
        "postgres_pass": "secret",		            // Postgres DB pass
        "postgres_user": "postgres"        	        // Postgres user
        "redis_host": "192.168.1.31",               // Redis host
        "redis_port": 6379,                         // Redis port
        "redis_pass": "secret",
        "redis_desks_hset_key": "ttt_desks_hset",   // Redis Desks HSET key
        "redis_states_hset_key_prefix": "ttt_states_hset",  // Redis States HSET key
        "redis_hscan_slice_size": 5000,             // Redis HSCAN size (COUNT). How many data to fetch from Redis at once when updating to DB
        "master": true,                             // If {"master": true} then this instance will fetch data from Redis and save it to DB
                                                    // It is possible to run more then one "slaves" and one "master", which will pull the data from Redis to the DB
        "slave": true,                              // If {"slave": true} this instance will run training iterations and save the data in Redis
        "clear_redis_data_on_start": false          // Clear Redis data when starting this instance - valid only if {"master": true}

    }
}
